#summary HW3

In HW2 you handled `VerifyMove` message and made sure the move was legal.
In HW3 you will handle `UpdateUI` to update your graphics using the MVP pattern, but only write the presenter (in HW4 you will write the view).

Specifically, write a `YourGamePresenter` that will handle `UpdateUI` and control a view interface. (HW4 will do the view implementation.)
Also write a `YourGamePresenterTest` that will cover interesting states in your game. You will need to download [https://code.google.com/p/mockito/downloads/list Mockito] and use mocks for the view and container.


Example of how mockito was used last semester to test the Presenter class:
[https://code.google.com/p/nyu-gaming-course-2013/source/browse/trunk/eclipse/test/org/simongellis/hw3/PresenterTest.java?spec=svn529&r=529 PresenterTest with Mockito]
The relevant code:
{{{
        @Before
        public void setup() {
                presenter = new Presenter();
                view = Mockito.mock(Presenter.View.class);
                ...
                HasClickHandlers dummyResetButton = Mockito.mock(HasClickHandlers.class);
                when(view.getResetButton()).thenReturn(dummyResetButton);
                presenter.setView(view);
        }

        @Test
        public void testCheckmateDisplayed() {
                GameResult whiteCheckmate = new GameResult(Color.WHITE, GameResultReason.CHECKMATE);
                ...
                State state = new State(
                                Color.BLACK,
                                board,
                                ...
                                whiteCheckmate);
                presenter.setState(state);
                verify(view).setGameResult(whiteCheckmate);
        }
}}}
