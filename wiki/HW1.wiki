#summary HW1.

= HW1 =
For deadline and submission instructions see [https://code.google.com/p/nyu-gaming-course-2013/wiki/Grading Grading].

*Important: you have two weeks to do HW1 (you can submit HW1 and HW2 together).*


Administration stuff to do:
  * Choose your group.
  * Create two Google code projects: one for your individual game and another for your group game.
  * Add your name & NYU & Google id with links to your individual and group projects to our  [https://docs.google.com/spreadsheet/ccc?key=0AvLEQb_5Yz6RdHRmb3RReDFnSWJRWm1EakJaTGozSnc#gid=2 spreadsheet]
  * Mailing list: register to [https://groups.google.com/forum/?fromgroups#!forum/nyu-gaming-course-fall-2013 our Google group]. If you have any problems or questions, send an email to our group: `nyu-gaming-course-fall-2013@googlegroups.com`
  * Go over all the wiki pages.
  * Install [http://www.oracle.com/technetwork/java/javase/downloads/jdk7u9-downloads-1859576.html Java JDK SE 7 Java]
  * Install and configure [Eclipse]

==Individual HW1==
Choose your individual game: it can be any turn-based two-player game that wasn't chosen already in previous years. The games that were chosen in previous years were:
  # Chess
  # Connect4 (four in a line) and Connect5
  # Xiangqi
  # Checkers
  # Domino
  # Bridge
  # Reversi
  # SquirrelRace
  # Battleship
  # Big Two
  # Blackjack
  # Spades
  # Chinese poker
  # Gongzhu
  # doudizhu

For example, you can choose from this list:
  # Backgammon
  # shogi
  # go
  # chinese_checkers
  # nine_mens_morris
  # Stratego
Or choose a card game from [http://www.hoylegaming.com/rules/Default.aspx here] or from this list:
  *	5 Card Draw
  *	Deuces Wild
  *	Go Fish
  *	Baccarat
  *	Golf
  *	Keno
  *	Let it Ride
  *	Pitch
  *	Poker
  *	Roulette
  *	Rummy 500
  *	Slot Machines
  *	Spades
  *	Spite and Malice
  *	Three Card Poker
  *	Video Poker
  *	Royal Match 21
  *	Video Blackjack
  *	Pachisi
  *	Best 21
  *	Euchre
  *	3 Towers
  *	Fast 21
  *	Rummy
  *	Fortune Pai Gow Poker
  *	Hearts
  *	Big Raise Hold 'Em
  *	BlackJack
  *	Bridge
  *	Caribbean Stud Poker
  *	Craps
  *	Cribbage
  *	Canasta
  *	Four Card Poker
  *	Horse Racing
Or any other game you want.    

Write the `State` class of your game, but do not implement the logic of the `makeMove` method. Also write *20-30* unit tests for your game logic.

All your tests should fail now, because your implementation is just a stub.
After HW2, all the tests should pass (unless you have bugs in your tests or implementation).

Write you `State` class that describes the state of your game, e.g.,
  * In a connect four/five, the state of the game, as described in this [https://code.google.com/p/gaming-platform/source/browse/trunk/eclipse/gaming-platform/src/org/gaming/shared/games/connect5/State.java State] class, includes: an array representing the `board`, who has the current turn, etc. Here are [https://code.google.com/p/gaming-platform/source/browse/trunk/eclipse/gaming-platform/test/org/gaming/shared/games/connect5/StateTest.java tests] for the state of connect four/five.
  * In the *card game* called [http://en.wikipedia.org/wiki/Cheat_(game) Cheat], the [https://code.google.com/p/gaming-platform/source/browse/trunk/eclipse/gaming-platform/src/org/gaming/shared/games/cheat/State.java State class] includes the cards each player has, the remaining cards in the middle, and the last claim (the card facing up). If you have a card game, I suggest copying card-related classes such as [https://code.google.com/p/gaming-platform/source/browse/trunk/eclipse/gaming-platform/src/org/gaming/shared/cards/Card.java Card], [https://code.google.com/p/gaming-platform/source/browse/trunk/eclipse/gaming-platform/src/org/gaming/shared/cards/Rank.java Rank], and [https://code.google.com/p/gaming-platform/source/browse/trunk/eclipse/gaming-platform/src/org/gaming/shared/cards/Suit.java Suit]. Here are some [https://code.google.com/p/gaming-platform/source/browse/trunk/eclipse/gaming-platform/test/org/gaming/shared/games/cheat/StateTest.java example tests] for the Cheat game.
  * For the chess game, this is [https://code.google.com/p/nyu-gaming-course-2013/source/browse/trunk/eclipse/src/org/shared/chess/State.java the State] of the game. Here are [https://code.google.com/p/nyu-gaming-course-2013/source/browse/trunk/eclipse/test/org/jiangfengchen/hw1/AbstractStateChangerCaptureForBlack.java tests for legal chess capturing moves] and [https://code.google.com/p/nyu-gaming-course-2013/source/browse/trunk/eclipse/test/org/jiangfengchen/hw1/AbstractStateChangerIllegalBlackCapture.java tests for illegal moves].

Make sure that your state is deterministic, i.e., if your game depends on 
random events such as shuffling a deck of cards or rolling a dice, then 
your state should receive them as a move (your state must not have a random dice or a shuffle method!).


==Group HW1==
Divide into groups of 2-3 students, and invent a game for *learning a new language*. We will focus just on learning new words (increasing the *vocabulary*), and not on grammar (because grammar rules are very different between languages). Focus on a single-player game (if time permits, we could add a multiplayer variant later).

For next week, find your partners, and decide on the game play (add a slide to [https://docs.google.com/presentation/d/1YyhLG0aKsBZe18udbKUo8d79bKqWMXkW-eZVh6SJOXI/edit#slide=id.p our slides] which will have a printscreen of your game). No need to write any code.

All the games will use a common database of modules of words. E.g., there will be a color module which will teach you about colors, a house objects module for objects you can find in a house, etc. We will build this database together in following assignments (each student will add a small part). The database will also contain images and translation of the words into multiple languages.

Example ideas for games:
  * Simple flash cards, or multiple choice questions, with timers, etc.
  * Shooting game where you see an image and you need to shoot the correct word.
  * [http://en.wikipedia.org/wiki/Concentration_(game) Memory game] where one card has the image and another has the word and you need to match them.
  * Letter based games, e.g., [http://en.wikipedia.org/wiki/Wheel_of_Fortune_(U.S._game_show) Wheel of furtune] where you show an image and then slowly reveal one random letter at a time.
  * Fruit ninja where you see several images and you need to slice the correct words (the images change after every level).