#summary HW1.

= HW1 =
For deadline and submission instructions see [Grading].

*Due date: beginning of lesson 3 (you have two weeks to do HW1)*


Administration stuff to do:
  * Add your name & NYU & Google id, and your game name and github URL to our  [https://docs.google.com/spreadsheet/ccc?key=0AvLEQb_5Yz6RdHRmb3RReDFnSWJRWm1EakJaTGozSnc#gid=3 spreadsheet]. Choose a game that no other students chose and or two games that were done in previous courses (see the list of [https://docs.google.com/document/d/1KDDRvWEyaWoVxSSmrlA8Lf2r9knTkuA4cX8aTTplirQ/edit# suggested games]).
  * Mailing list: register to [https://groups.google.com/forum/?fromgroups#!forum/nyu-gaming-course-winter-2014 our Google group]. If you have any problems or questions, send an email to our group: `nyu-gaming-course-winter-2014@googlegroups.com`
  * Go over all the wiki pages.
  * Install [http://www.oracle.com/technetwork/java/javase/downloads/jdk7u9-downloads-1859576.html Java JDK SE 7 Java]
  * Install and configure [Eclipse]

Choose your game: it can be any turn-based two-player game that wasn't chosen already in previous years.   

Write the `State` class of your game, but do not implement the logic of the `makeMove` method. Also write *20-30* unit tests for your game logic.

All your tests should fail now, because your implementation is just a stub.
After HW2, all the tests should pass (unless you have bugs in your tests or implementation).

Write you `State` class that describes the state of your game, e.g.,
  * In a connect four/five, the state of the game, as described in this [https://code.google.com/p/gaming-platform/source/browse/trunk/eclipse/gaming-platform/src/org/gaming/shared/games/connect5/State.java State] class, includes: an array representing the `board`, who has the current turn, etc. Here are [https://code.google.com/p/gaming-platform/source/browse/trunk/eclipse/gaming-platform/test/org/gaming/shared/games/connect5/StateTest.java tests] for the state of connect four/five.
  * In the *card game* called [http://en.wikipedia.org/wiki/Cheat_(game) Cheat], the [https://code.google.com/p/gaming-platform/source/browse/trunk/eclipse/gaming-platform/src/org/gaming/shared/games/cheat/State.java State class] includes the cards each player has, the remaining cards in the middle, and the last claim (the card facing up). If you have a card game, I suggest copying card-related classes such as [https://code.google.com/p/gaming-platform/source/browse/trunk/eclipse/gaming-platform/src/org/gaming/shared/cards/Card.java Card], [https://code.google.com/p/gaming-platform/source/browse/trunk/eclipse/gaming-platform/src/org/gaming/shared/cards/Rank.java Rank], and [https://code.google.com/p/gaming-platform/source/browse/trunk/eclipse/gaming-platform/src/org/gaming/shared/cards/Suit.java Suit]. Here are some [https://code.google.com/p/gaming-platform/source/browse/trunk/eclipse/gaming-platform/test/org/gaming/shared/games/cheat/StateTest.java example tests] for the Cheat game.
  * For the chess game, this is [https://code.google.com/p/nyu-gaming-course-2013/source/browse/trunk/eclipse/src/org/shared/chess/State.java the State] of the game. Here are [https://code.google.com/p/nyu-gaming-course-2013/source/browse/trunk/eclipse/test/org/jiangfengchen/hw1/AbstractStateChangerCaptureForBlack.java tests for legal chess capturing moves] and [https://code.google.com/p/nyu-gaming-course-2013/source/browse/trunk/eclipse/test/org/jiangfengchen/hw1/AbstractStateChangerIllegalBlackCapture.java tests for illegal moves].

Make sure that your state is deterministic, i.e., if your game depends on 
random events such as shuffling a deck of cards or rolling a dice, then 
your state should receive them as a move (your state must not have a random dice or a shuffle method!).